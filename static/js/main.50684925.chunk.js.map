{"version":3,"sources":["components/WeatherForm.js","components/WeatherResult.js","components/Louder.js","App.js","index.js"],"names":["WeatherForm","getWeather","cityRef","useRef","useState","text","setText","submitHandler","e","a","preventDefault","trim","current","focus","action","onSubmit","ref","value","type","placeholder","onChange","target","WeatherResult","weather","location","name","country","condition","localtime","humidity","last_updated","temp_f","className","src","icon","alt","Louder","App","setWeather","isLouding","setIsLouding","isError","setIsError","cityName","fetch","res","json","data","error","setTimeout","style","color","fontSize","margin","message","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sMA2BeA,EAzBK,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WACfC,EAAUC,iBAAO,MACvB,EAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACMC,EAAa,uCAAG,WAAOC,GAAP,SAAAC,EAAA,sDACpBD,EAAEE,iBACkB,KAAhBL,EAAKM,SACPV,EAAWI,GACXC,EAAQ,IACRJ,EAAQU,QAAQC,SALE,2CAAH,sDAQnB,OACE,uBAAMC,OAAO,GAAGC,SAAUR,EAA1B,UACE,uBACES,IAAKd,EACLe,MAAOZ,EACPa,KAAK,OACLC,YAAY,oBACZC,SAAU,SAACZ,GAAD,OAAOF,EAAQE,EAAEa,OAAOJ,UAEpC,gDCISK,EAxBO,SAAC,GAAwC,IAAD,IAArCC,QAAWC,EAA0B,EAA1BA,SAAUZ,EAAgB,EAAhBA,QACpCa,EAA6BD,EAA7BC,KAAMC,EAAuBF,EAAvBE,QACNC,GAD6BH,EAAdI,UAC+BhB,EAA9Ce,WAAWE,EAAmCjB,EAAnCiB,SAAUC,EAAyBlB,EAAzBkB,aAAcC,EAAWnB,EAAXmB,OAC3C,OACE,sBAAKC,UAAU,iBAAf,UACE,8BACE,4CACA,+BAAON,OAET,8BACE,yCACA,+BAAOD,OAET,qBAAKQ,IAAKN,EAAUO,KAAMC,IAAKR,EAAUtB,OACzC,8BAAI0B,EAAJ,WACA,4BAAIJ,EAAUtB,OACd,2CAAcwB,KACd,4BACE,kDAAqBC,WCddM,EAJA,WACb,OAAO,qBAAKJ,UAAU,YCuCTK,EAnCH,WACV,MAA8BjC,mBAAS,MAAvC,mBAAOmB,EAAP,KAAgBe,EAAhB,KACA,EAAkClC,oBAAS,GAA3C,mBAAOmC,EAAP,KAAkBC,EAAlB,KACA,EAA8BpC,mBAAS,MAAvC,mBAAOqC,EAAP,KAAgBC,EAAhB,KACMzC,EAAU,uCAAG,WAAO0C,GAAP,iBAAAlC,EAAA,6DACjBiC,EAAW,MACXF,GAAa,GAFI,SAGCI,MAAM,oFAAD,OAC+DD,EAD/D,YAHN,cAGXE,EAHW,gBAMEA,EAAIC,OANN,QAMXC,EANW,QAORC,OACPN,EAAWK,GACXE,YAAW,kBAAMP,EAAW,QAAO,KACnCJ,EAAW,OAEXA,EAAWS,GAEbP,GAAa,GAdI,4CAAH,sDAgBhB,OACE,sBAAKR,UAAU,UAAf,UACE,kDACA,cAAC,EAAD,CAAa/B,WAAYA,IACxBwC,GACC,mBAAGS,MAAO,CAAEC,MAAO,UAAWC,SAAU,SAAUC,OAAQ,YAA1D,SACGZ,EAAQO,MAAMM,UAGlBf,GAAa,cAAC,EAAD,IACbhB,IAAYgB,GAAa,cAAC,EAAD,CAAehB,QAASA,QChCxDgC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.50684925.chunk.js","sourcesContent":["import { useState, useRef } from \"react\";\n\nconst WeatherForm = ({ getWeather }) => {\n  const cityRef = useRef(null);\n  const [text, setText] = useState(\"\");\n  const submitHandler = async (e) => {\n    e.preventDefault();\n    if (text.trim() !== \"\") {\n      getWeather(text);\n      setText(\"\");\n      cityRef.current.focus();\n    }\n  };\n  return (\n    <form action=\"\" onSubmit={submitHandler}>\n      <input\n        ref={cityRef}\n        value={text}\n        type=\"text\"\n        placeholder=\"Enter a city name\"\n        onChange={(e) => setText(e.target.value)}\n      />\n      <button>search</button>\n    </form>\n  );\n};\n\nexport default WeatherForm;\n","import React from \"react\";\n\nconst WeatherResult = ({ weather: { location, current } }) => {\n  const { name, country, localtime } = location;\n  const { condition, humidity, last_updated, temp_f } = current;\n  return (\n    <div className=\"weather-result\">\n      <p>\n        <span>Country:</span>\n        <span>{country}</span>\n      </p>\n      <p>\n        <span>City:</span>\n        <span>{name}</span>\n      </p>\n      <img src={condition.icon} alt={condition.text} />\n      <p>{temp_f} &deg;</p>\n      <p>{condition.text}</p>\n      <p>Humidity: {humidity}</p>\n      <p>\n        <span>last updated: {last_updated}</span>\n      </p>\n    </div>\n  );\n};\n\nexport default WeatherResult;\n","import React from \"react\";\n\nconst Louder = () => {\n  return <div className=\"louder\"></div>;\n};\n\nexport default Louder;\n","import React from \"react\";\nimport \"./App.css\";\nimport WeatherForm from \"./components/WeatherForm\";\nimport WeatherResult from \"./components/WeatherResult\";\nimport Louder from \"./components/Louder\";\nimport { useState } from \"react\";\n\nconst App = () => {\n  const [weather, setWeather] = useState(null);\n  const [isLouding, setIsLouding] = useState(false);\n  const [isError, setIsError] = useState(null);\n  const getWeather = async (cityName) => {\n    setIsError(null);\n    setIsLouding(true);\n    const res = await fetch(\n      `https://api.weatherapi.com/v1/current.json?key=e957e17266c3460b94d162206211405&q=${cityName}&aqi=no`\n    );\n    const data = await res.json();\n    if (data.error) {\n      setIsError(data);\n      setTimeout(() => setIsError(null), 3000);\n      setWeather(null);\n    } else {\n      setWeather(data);\n    }\n    setIsLouding(false);\n  };\n  return (\n    <div className=\"weather\">\n      <h1>weather Forecast</h1>\n      <WeatherForm getWeather={getWeather} />\n      {isError && (\n        <p style={{ color: \"crimson\", fontSize: \"2.7rem\", margin: \"2.4rem 0\" }}>\n          {isError.error.message}\n        </p>\n      )}\n      {isLouding && <Louder />}\n      {weather && !isLouding && <WeatherResult weather={weather} />}\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n// import App from \"./App\";\nimport App from \"./App\";\nimport \"./App.css\";\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}